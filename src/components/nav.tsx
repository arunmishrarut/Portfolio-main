'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { navLinks } from '../constants';
import MenuButton from '../components/menuButton';
import MobileMenu from '../components/mobileMenu';
import webGLFluidEnhanced from 'webgl-fluid-enhanced';
import { motion, Variants } from 'framer-motion';
import { fadeIn } from '../utils/motion';
import { changeVariant, changePalette, isDarkVariant } from '../utils/colors';

const Nav = () => {
  const [isDarkMode, setIsDarkMode] = useState(isDarkVariant);
  const [isOpen, setIsOpen] = useState(false);

  const changeTheme = () => {
    changePalette();
  };
  const toggleDarkMode = () => {
    changeVariant();
    setIsDarkMode(!isDarkMode);
  };

  const PaletteIcon = ({ tabIndex }: { tabIndex: number }) => (
    <motion.svg
      width='100%'
      height='100%'
      viewBox='0 0 256 256'
      className='h-6 w-6 text-text hover:text-primary focus:text-primary'
      tabIndex={tabIndex}
      whileHover={{ translateY: '-2px' }}
      transition={{ duration: 0.2 }}
      onClick={changeTheme}
      onKeyDown={(event) => {
        if (event.key === 'Enter') {
          changeTheme();
        }
      }}
    >
      <g transform='matrix(10.882,0,0,10.882,0,21.5682)'>
        <path
          d='M12.637,19.561C16.748,19.561 19.492,18.106 19.492,15.957C19.492,14.033 17.852,13.604 17.852,12.471C17.852,10.908 23.525,10.596 23.525,6.582C23.525,2.617 19.434,0 13.359,0C5.381,0 0,3.984 0,9.951C0,15.693 5.107,19.561 12.637,19.561ZM12.637,17.891C6.025,17.891 1.67,14.707 1.67,9.951C1.67,4.971 6.299,1.67 13.359,1.67C18.486,1.67 21.856,3.662 21.856,6.582C21.856,9.99 16.143,9.531 16.143,12.48C16.143,14.15 17.822,14.678 17.822,15.83C17.822,17.07 15.781,17.891 12.637,17.891ZM11.836,15.586C13.32,15.586 14.541,14.365 14.541,12.871C14.541,11.397 13.32,10.176 11.836,10.176C10.352,10.176 9.131,11.397 9.131,12.871C9.131,14.365 10.352,15.586 11.836,15.586ZM11.836,14.453C10.967,14.453 10.264,13.75 10.264,12.871C10.264,11.904 11.006,11.328 11.816,11.318C12.647,11.309 13.408,11.875 13.408,12.871C13.408,13.75 12.715,14.453 11.836,14.453Z'
          fill='currentColor'
        />
        <path
          d='M4.932,11.289C5.83,11.289 6.553,10.547 6.553,9.648C6.553,8.75 5.83,8.027 4.932,8.027C4.043,8.027 3.311,8.75 3.311,9.648C3.311,10.547 4.043,11.289 4.932,11.289Z'
          fill='currentColor'
        />
        <path
          d='M8.496,8.164C9.629,8.164 10.547,7.256 10.547,6.104C10.547,4.98 9.619,4.082 8.496,4.082C7.354,4.082 6.436,4.98 6.436,6.104C6.436,7.256 7.354,8.164 8.496,8.164Z'
          fill='currentColor'
        />
        <path
          d='M13.447,6.582C14.365,6.582 15.088,5.85 15.088,4.932C15.088,4.023 14.365,3.291 13.447,3.291C12.549,3.291 11.797,4.023 11.797,4.932C11.797,5.85 12.549,6.582 13.447,6.582Z'
          fill='currentColor'
        />
        <path
          d='M17.91,7.207C18.643,7.207 19.229,6.611 19.229,5.869C19.229,5.137 18.643,4.541 17.91,4.541C17.168,4.541 16.563,5.137 16.563,5.869C16.563,6.611 17.168,7.207 17.91,7.207Z'
          fill='currentColor'
        />
      </g>
    </motion.svg>
  );

  const SunIcon = ({ tabIndex }: { tabIndex: number }) => (
    <motion.svg
      width='100%'
      height='100%'
      viewBox='0 0 256 256'
      className='h-6 w-6 text-text hover:text-primary focus:text-primary'
      tabIndex={tabIndex}
      whileHover={{ translateY: '-2px' }}
      transition={{ duration: 0.2 }}
      onClick={toggleDarkMode}
      onKeyDown={(event) => {
        if (event.key === 'Enter') {
          toggleDarkMode();
        }
      }}
    >
      <g transform='matrix(12.1195,0,0,12.086,0,0)'>
        <path
          d='M10.566,3.799C11.025,3.799 11.406,3.418 11.406,2.949L11.406,0.85C11.406,0.381 11.025,0 10.566,0C10.098,0 9.717,0.381 9.717,0.85L9.717,2.949C9.717,3.418 10.098,3.799 10.566,3.799ZM15.352,5.801C15.684,6.123 16.221,6.133 16.553,5.801L18.047,4.307C18.369,3.984 18.369,3.438 18.047,3.105C17.725,2.783 17.188,2.783 16.856,3.105L15.352,4.609C15.029,4.941 15.029,5.479 15.352,5.801ZM17.334,10.596C17.334,11.055 17.725,11.436 18.184,11.436L20.283,11.436C20.742,11.436 21.123,11.055 21.123,10.596C21.123,10.137 20.742,9.746 20.283,9.746L18.184,9.746C17.725,9.746 17.334,10.137 17.334,10.596ZM15.352,15.391C15.029,15.723 15.029,16.26 15.352,16.582L16.856,18.096C17.188,18.408 17.725,18.398 18.047,18.086C18.369,17.754 18.369,17.217 18.047,16.895L16.543,15.391C16.221,15.078 15.684,15.078 15.352,15.391ZM10.566,17.393C10.098,17.393 9.717,17.773 9.717,18.232L9.717,20.342C9.717,20.801 10.098,21.182 10.566,21.182C11.025,21.182 11.406,20.801 11.406,20.342L11.406,18.232C11.406,17.773 11.025,17.393 10.566,17.393ZM5.771,15.391C5.439,15.078 4.893,15.078 4.57,15.391L3.076,16.885C2.754,17.207 2.754,17.744 3.066,18.076C3.389,18.389 3.936,18.398 4.268,18.086L5.762,16.582C6.084,16.26 6.084,15.723 5.771,15.391ZM3.789,10.596C3.789,10.137 3.398,9.746 2.939,9.746L0.84,9.746C0.381,9.746 0,10.137 0,10.596C0,11.055 0.381,11.436 0.84,11.436L2.939,11.436C3.398,11.436 3.789,11.055 3.789,10.596ZM5.762,5.801C6.084,5.488 6.084,4.932 5.771,4.609L4.277,3.105C3.955,2.793 3.408,2.783 3.086,3.105C2.764,3.438 2.764,3.984 3.076,4.297L4.57,5.801C4.893,6.123 5.43,6.123 5.762,5.801Z'
          fill='currentColor'
        />
        <path
          d='M10.557,15.576C13.272,15.576 15.527,13.32 15.527,10.596C15.527,7.861 13.272,5.605 10.557,5.605C7.842,5.605 5.586,7.861 5.586,10.596C5.586,13.32 7.842,15.576 10.557,15.576ZM10.557,14.082C8.652,14.082 7.07,12.5 7.07,10.596C7.07,8.682 8.652,7.1 10.557,7.1C12.461,7.1 14.043,8.682 14.043,10.596C14.043,12.5 12.461,14.082 10.557,14.082Z'
          fill='currentColor'
        />
      </g>
    </motion.svg>
  );

  const MoonIcon = ({ tabIndex }: { tabIndex: number }) => (
    <motion.svg
      width='100%'
      height='100%'
      viewBox='0 0 256 256'
      className='h-6 w-6 text-text hover:text-primary focus:text-primary'
      tabIndex={tabIndex}
      whileHover={{ translateY: '-2px' }}
      transition={{ duration: 0.2 }}
      onClick={toggleDarkMode}
      onKeyDown={(event) => {
        if (event.key === 'Enter') {
          toggleDarkMode();
        }
      }}
    >
      <g transform='matrix(13.0291,0,0,12.9582,0,0)'>
        <path
          d='M15.342,13.262C9.961,13.262 6.621,10.02 6.621,4.814C6.621,3.33 6.865,2.021 7.227,1.318C7.373,1.035 7.402,0.898 7.402,0.703C7.402,0.381 7.1,0 6.689,0C6.611,0 6.426,0.029 6.152,0.137C2.539,1.602 0,5.41 0,9.512C0,15.44 4.307,19.756 10.234,19.756C14.482,19.756 17.93,17.529 19.512,13.877C19.629,13.623 19.648,13.408 19.648,13.301C19.648,12.9 19.307,12.627 19.004,12.627C18.848,12.627 18.731,12.637 18.496,12.725C17.705,13.047 16.514,13.262 15.342,13.262ZM1.533,9.443C1.533,6.406 3.115,3.516 5.645,1.924C5.332,2.832 5.166,3.838 5.166,4.951C5.166,11.055 8.887,14.688 15.117,14.688C16.123,14.688 16.973,14.57 17.783,14.287C16.299,16.738 13.438,18.232 10.293,18.232C5.225,18.232 1.533,14.541 1.533,9.443Z'
          fill='currentColor'
        />
      </g>
    </motion.svg>
  );

  const handleClick = () => {
    setIsOpen(!isOpen);
  };

  const handleMenuItemClick = () => {
    setIsOpen(false);
  };

  useEffect(() => {
    const navElements = document.querySelectorAll('.nav-link');
    for (let i = 0; i < navElements.length; i++) {
      navElements[i].addEventListener('click', () => {
        webGLFluidEnhanced.splats();
      });
    }
  }, []);

  return (
    <nav className='paddingX fixed top-0 z-20 flex w-full items-center bg-secondary py-5 shadow-xl'>
      <div className='mx-auto flex w-full max-w-7xl select-none items-center justify-between'>
        <Link
          href='/'
          className='nav-link flex items-center gap-2'
          onClick={() => {
            window.scrollTo(0, 0);
          }}
        >
          <motion.svg
            width="100%"
            height="100%"
            viewBox="0 0 1024 1024"
            className="h-9 w-9 object-contain text-text"
            variants={fadeIn('', '', 0, 1) as Variants}
            initial="hidden"
            animate="show"
          >
            <path fill="currentcolor" opacity="1.000000" stroke="none" 
	d="
M615.054016,54.620003 
	C639.337891,60.572018 662.610840,68.389626 685.119385,78.176102 
	C715.964539,91.587242 745.234253,107.881050 772.412048,127.890732 
	C790.502991,141.210220 807.556152,155.617844 823.708923,171.237473 
	C839.847961,186.843765 854.479065,203.695358 868.256531,221.350342 
	C889.116272,248.080978 906.216431,277.115509 920.441711,307.820648 
	C934.227539,337.577332 944.423157,368.563568 951.627258,400.597321 
	C955.340027,417.106812 958.032654,433.761627 960.072205,450.494781 
	C961.411621,461.483612 962.485168,472.580048 962.371643,483.729034 
	C962.171570,503.358948 963.220398,523.042114 961.214417,542.598145 
	C958.899780,565.163940 955.745178,587.624756 950.327759,609.725647 
	C942.833191,640.300110 932.791504,669.959167 919.375366,698.449707 
	C904.316589,730.428833 885.956238,760.377930 864.076416,788.157715 
	C855.451111,799.108948 845.921631,809.261475 836.733521,819.718323 
	C828.794128,828.754272 819.820190,836.619446 811.173523,844.798767 
	C798.551270,856.738586 784.851135,867.521179 770.679565,877.655090 
	C750.087646,892.380066 728.443176,905.384338 705.742554,916.510254 
	C681.558472,928.363403 656.508972,938.095032 630.529480,945.418152 
	C611.224609,950.859802 591.698975,955.192322 571.864380,958.011353 
	C560.730896,959.593689 549.513977,960.591858 538.293701,961.577087 
	C524.303528,962.805481 510.351440,962.212769 496.387848,962.339111 
	C472.280487,962.557190 448.452911,959.885071 424.701660,955.655212 
	C399.982788,951.252930 375.842926,944.942383 352.203796,936.602966 
	C320.141724,925.292053 289.952026,910.161682 261.162537,892.112915 
	C245.096893,882.040894 229.862717,870.821655 215.193954,858.884033 
	C206.583206,851.876465 198.468170,844.222473 190.352188,836.590454 
	C171.303726,818.677917 154.123474,799.109375 138.490082,778.263000 
	C118.714378,751.893005 102.227966,723.483582 88.564056,693.437988 
	C76.646103,667.231628 67.264404,640.172974 60.440983,612.224609 
	C56.000751,594.037598 52.893368,575.625977 50.505596,557.038208 
	C47.101646,530.539734 47.004223,503.941803 47.877411,477.391022 
	C48.545937,457.063416 51.358917,436.822388 55.014149,416.746216 
	C60.746086,385.263794 69.845680,354.759125 81.977196,325.210938 
	C91.587860,301.802612 103.251846,279.396027 116.680214,257.885040 
	C126.725990,241.792648 137.525513,226.244919 149.456436,211.556976 
	C165.190735,192.186768 182.610687,174.364487 201.050659,157.503998 
	C215.307053,144.468735 230.414871,132.534714 246.279083,121.622147 
	C268.225555,106.525780 291.285370,93.322563 315.623260,82.324425 
	C330.643738,75.536758 345.942474,69.536896 361.510010,64.240303 
	C379.737427,58.038731 398.368286,53.179943 417.310852,49.706276 
	C429.677032,47.438580 442.120636,45.525833 454.587341,43.896568 
	C463.285675,42.759792 472.075500,41.858852 480.835693,41.748798 
	C505.103790,41.443928 529.409912,40.951069 553.585510,43.726608 
	C574.146606,46.087170 594.566040,49.392441 615.054016,54.620003 
M261.843781,164.388000 
	C252.341858,171.865463 242.507111,178.962143 233.415146,186.908676 
	C219.393417,199.163910 206.161133,212.275238 193.811737,226.256104 
	C179.070023,242.945343 165.691711,260.605713 153.689804,279.399963 
	C134.985031,308.690430 120.294220,339.816986 109.165451,372.681213 
	C102.717117,391.723724 98.060020,411.226746 94.447563,430.981628 
	C91.435524,447.453125 89.021103,464.088318 88.580994,480.778015 
	C88.108192,498.707764 87.869728,516.676086 89.145226,534.664490 
	C90.685219,556.383057 93.743156,577.821960 98.649658,598.961243 
	C109.945953,647.630432 129.406143,692.887756 156.832397,734.667664 
	C174.270493,761.232056 194.596725,785.362244 217.479874,807.459351 
	C229.587082,819.150635 242.364609,830.000488 255.692627,840.140747 
	C288.830841,865.352905 325.164856,884.981201 364.200562,899.398315 
	C403.313965,913.844116 443.828156,922.396667 485.449188,924.440063 
	C514.663391,925.874390 543.969299,925.114685 572.959290,920.473083 
	C602.526611,915.739075 631.377625,908.162903 659.428711,897.551575 
	C682.988159,888.639343 705.509338,877.591675 727.020508,864.591980 
	C747.368347,852.295349 766.302551,838.014954 784.471680,822.610413 
	C802.174377,807.601196 818.075256,790.916321 832.996643,773.286011 
	C845.775635,758.187073 857.138855,742.010376 866.870667,724.717529 
	C875.847412,708.766052 884.404724,692.575989 891.391846,675.684753 
	C901.045044,652.348328 908.502808,628.281494 914.151001,603.600769 
	C920.128540,577.480835 923.216492,551.028076 924.468933,524.378479 
	C925.067688,511.638855 924.864624,498.822693 923.875305,485.991089 
	C922.549011,468.789185 920.633362,451.727051 917.766663,434.721619 
	C911.686401,398.653351 900.714600,364.093658 885.391602,330.983856 
	C873.795715,305.927521 860.310425,281.866577 843.783081,259.619720 
	C831.692383,243.344803 819.258179,227.384918 804.893433,212.997650 
	C798.309998,206.403946 790.631836,200.888168 784.454773,194.077011 
	C776.893677,185.739731 768.255493,178.800522 759.549927,172.008820 
	C734.349182,152.348312 707.272461,135.642685 678.270935,122.037254 
	C652.490112,109.942757 625.863281,100.350388 598.205750,93.685486 
	C572.818604,87.567688 546.999573,84.500298 520.895264,84.455688 
	C506.771362,84.431557 492.653473,83.982491 478.496796,85.170372 
	C467.421814,86.099655 456.325928,87.107063 445.394012,88.762299 
	C430.191162,91.064209 415.113739,94.363350 400.219421,98.387138 
	C375.319000,105.114151 351.249451,113.994957 327.980774,125.130020 
	C304.968842,136.142227 283.167450,149.159744 261.843781,164.388000 
z"/>
<path fill="currentcolor" opacity="1.000000" stroke="none" 
	d="
M524.869873,618.968262 
	C511.721710,585.643555 498.722473,552.674561 485.676819,519.723877 
	C484.919739,517.811768 484.641998,515.909729 484.642578,513.887634 
	C484.658661,455.394318 484.710968,396.900848 484.557495,338.407959 
	C484.544952,333.631683 486.221313,332.532990 490.613403,332.579834 
	C508.109375,332.766541 525.610352,332.783447 543.105286,332.550018 
	C547.231506,332.494995 549.400513,334.120941 551.393982,337.466156 
	C579.871826,385.254608 608.453552,432.981232 637.010620,480.722473 
	C638.190552,482.695221 639.267761,484.757141 641.918030,486.496094 
	C646.698181,478.432617 651.359131,470.619720 655.972961,462.779083 
	C680.805786,420.578400 705.637268,378.376831 730.425781,336.150085 
	C731.832520,333.753754 733.547424,332.604462 736.428955,332.619141 
	C754.593079,332.711670 772.758118,332.712769 790.922241,332.621796 
	C794.099365,332.605896 795.462708,333.668823 795.336243,336.948761 
	C795.162964,341.441467 795.297668,345.946014 795.297607,350.445465 
	C795.295837,460.599579 795.293823,570.753662 795.291687,680.907776 
	C795.291565,688.308655 795.291138,688.314697 787.907776,688.313599 
	C772.576172,688.311340 757.240051,688.088257 741.915527,688.414490 
	C736.718750,688.525085 735.542847,686.776245 735.552063,681.853760 
	C735.693237,606.362610 735.659546,530.871216 735.608704,455.379852 
	C735.606995,452.858795 736.499329,450.034393 733.235413,446.900421 
	C702.109375,498.519806 671.187317,549.800964 639.669983,602.069397 
	C608.456238,549.811157 577.817566,498.515686 547.178955,447.220215 
	C546.354370,447.416229 545.529846,447.612213 544.705322,447.808197 
	C543.948181,459.719849 544.454834,471.696625 544.366394,483.637299 
	C544.277527,495.635254 544.353699,507.634369 544.355347,519.632996 
	C544.356995,531.798279 544.357544,543.963562 544.356018,556.128845 
	C544.354492,568.294128 544.349548,580.459412 544.346619,592.624695 
	C544.343750,604.623291 544.340576,616.621948 544.339355,628.620544 
	C544.338074,640.711426 544.338989,652.802307 543.192627,665.224976 
	C537.131287,649.925903 531.070007,634.626892 524.869873,618.968262 
z"/>
<path fill="currentcolor" opacity="1.000000" stroke="none" 
	d="
M452.145874,452.986694 
	C483.404175,531.176270 514.529541,609.005432 545.531799,686.526611 
	C543.560059,688.871033 541.600220,688.288025 539.878784,688.292419 
	C521.713928,688.338867 503.547943,688.219971 485.384674,688.396179 
	C481.601471,688.432922 479.811646,687.094604 478.461182,683.615234 
	C469.007202,659.257324 459.357361,634.975403 449.761017,610.672791 
	C446.532776,602.497498 446.397614,602.397705 437.812500,602.395447 
	C394.649841,602.383850 351.486420,602.506653 308.325470,602.232300 
	C302.521210,602.195435 299.788605,603.990845 297.713593,609.348816 
	C288.333679,633.568970 278.411407,657.578796 268.983612,681.780945 
	C267.081757,686.663208 264.704468,688.602173 259.220642,688.466919 
	C242.232422,688.048218 225.227493,688.320435 208.229156,688.282837 
	C206.267731,688.278503 204.227966,688.657654 201.968399,687.395813 
	C202.856918,682.392639 205.294312,677.815796 207.170013,673.105591 
	C236.544235,599.341431 266.037323,525.624695 295.441925,451.872589 
	C310.483246,414.146088 325.462952,376.394562 340.297150,338.586334 
	C341.990204,334.271179 344.075134,332.429199 348.985291,332.528534 
	C365.643585,332.865448 382.313660,332.737335 398.977417,332.587402 
	C402.350067,332.557037 404.010895,333.749969 405.258057,336.854401 
	C420.772491,375.473328 436.408325,414.043488 452.145874,452.986694 
M376.595367,415.837280 
	C375.426239,413.951416 375.697235,411.216766 373.151794,409.953125 
	C371.497894,410.797333 370.955719,412.364075 370.372650,413.910370 
	C354.770782,455.286682 339.158173,496.658936 323.571625,538.041016 
	C321.515228,543.500793 322.236084,544.619873 327.973053,544.627625 
	C357.935547,544.668091 387.898193,544.672974 417.860687,544.632507 
	C423.871979,544.624390 424.930420,542.996521 422.747772,537.251831 
	C407.459167,497.012085 392.136078,456.785370 376.595367,415.837280 
z"/>
          </motion.svg>

          <motion.p
            className='flex cursor-pointer font-mono text-[18px] font-bold text-text'
            variants={fadeIn('', '', 0, 1) as Variants}
            initial='hidden'
            animate='show'
          >
            Arun&nbsp;
            <span className='hidden md:block'>Mishra</span>
          </motion.p>
        </Link>
        <ul className='hidden list-none flex-row gap-10 sm:flex'>
          {navLinks.map((link, index) => (
            <motion.li
              key={link.id}
              className='nav-link cursor-pointer font-mono text-[18px] font-medium text-text hover:text-primary focus:text-primary'
              tabIndex={0}
              variants={fadeIn('down', '', index * 0.25, 1) as Variants}
              initial='hidden'
              animate='show'
              whileHover={{ translateY: '-2px' }}
              transition={{ duration: 0.2 }}
              // onClick={() => (window.location.href = `#${link.id}`)}
              // onKeyDown={(event) => {
              //   if (event.key === 'Enter') {
              //       window.location.href = `#${link.id}`;}
              // }}
              onClick={() => {
                if (link.external_link) {
                  window.open(link.external_link, '_blank', 'noopener,noreferrer');
                } else {
                  window.location.href = `#${link.id}`;
                }
              }}
              onKeyDown={(event) => {
                if (event.key === 'Enter') {
                  if (link.external_link) {
                    window.open(link.external_link, '_blank', 'noopener,noreferrer');
                  } else {
                    window.location.href = `#${link.id}`;
                  }
                }
              }}
            >
              {link.title}
            </motion.li>
          ))}
          <motion.li
            className='flex w-full cursor-pointer flex-row items-center gap-3 object-contain'
            variants={fadeIn('down', '', navLinks.length * 0.25, 1) as Variants}
            initial='hidden'
            animate='show'
          >
            {isDarkMode ? <SunIcon tabIndex={0} /> : <MoonIcon tabIndex={0} />}
            <PaletteIcon tabIndex={0} />
          </motion.li>
        </ul>
        <motion.div
          className='flex flex-1 items-center justify-end sm:hidden'
          variants={fadeIn('down', '', 0.25, 1) as Variants}
          initial='hidden'
          animate='show'
        >
          <MenuButton onClick={handleClick} isOpen={isOpen} />
        </motion.div>
      </div>
      <MobileMenu isOpen={isOpen} onClose={handleMenuItemClick} isDarkMode={isDarkMode} PaletteIcon={PaletteIcon} SunIcon={SunIcon} MoonIcon={MoonIcon} />
    </nav>
  );
};

export default Nav;
