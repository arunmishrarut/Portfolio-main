/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@monogrid";
exports.ids = ["vendor-chunks/@monogrid"];
exports.modules = {

/***/ "(ssr)/./node_modules/@monogrid/gainmap-js/dist/decode.umd.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@monogrid/gainmap-js/dist/decode.umd.cjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/**\n * @monogrid/gainmap-js v3.1.0\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */\n\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\")) :\n    0;\n})(this, (function (exports, three) { 'use strict';\n\n    const getBufferForType = (type, width, height) => {\n        let out;\n        switch (type) {\n            case three.UnsignedByteType:\n                out = new Uint8ClampedArray(width * height * 4);\n                break;\n            case three.HalfFloatType:\n                out = new Uint16Array(width * height * 4);\n                break;\n            case three.UnsignedIntType:\n                out = new Uint32Array(width * height * 4);\n                break;\n            case three.ByteType:\n                out = new Int8Array(width * height * 4);\n                break;\n            case three.ShortType:\n                out = new Int16Array(width * height * 4);\n                break;\n            case three.IntType:\n                out = new Int32Array(width * height * 4);\n                break;\n            case three.FloatType:\n                out = new Float32Array(width * height * 4);\n                break;\n            default:\n                throw new Error('Unsupported data type');\n        }\n        return out;\n    };\n    let _canReadPixelsResult;\n    /**\n     * Test if this browser implementation can correctly read pixels from the specified\n     * Render target type.\n     *\n     * Runs only once\n     *\n     * @param type\n     * @param renderer\n     * @param camera\n     * @param renderTargetOptions\n     * @returns\n     */\n    const canReadPixels = (type, renderer, camera, renderTargetOptions) => {\n        if (_canReadPixelsResult !== undefined)\n            return _canReadPixelsResult;\n        const testRT = new three.WebGLRenderTarget(1, 1, renderTargetOptions);\n        renderer.setRenderTarget(testRT);\n        const mesh = new three.Mesh(new three.PlaneGeometry(), new three.MeshBasicMaterial({ color: 0xffffff }));\n        renderer.render(mesh, camera);\n        renderer.setRenderTarget(null);\n        const out = getBufferForType(type, testRT.width, testRT.height);\n        renderer.readRenderTargetPixels(testRT, 0, 0, testRT.width, testRT.height, out);\n        testRT.dispose();\n        mesh.geometry.dispose();\n        mesh.material.dispose();\n        _canReadPixelsResult = out[0] !== 0;\n        return _canReadPixelsResult;\n    };\n    /**\n     * Utility class used for rendering a texture with a material\n     *\n     * @category Core\n     * @group Core\n     */\n    class QuadRenderer {\n        /**\n         * Constructs a new QuadRenderer\n         *\n         * @param options Parameters for this QuadRenderer\n         */\n        constructor(options) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n            this._rendererIsDisposable = false;\n            this._supportsReadPixels = true;\n            /**\n             * Renders the input texture using the specified material\n             */\n            this.render = () => {\n                this._renderer.setRenderTarget(this._renderTarget);\n                try {\n                    this._renderer.render(this._scene, this._camera);\n                }\n                catch (e) {\n                    this._renderer.setRenderTarget(null);\n                    throw e;\n                }\n                this._renderer.setRenderTarget(null);\n            };\n            this._width = options.width;\n            this._height = options.height;\n            this._type = options.type;\n            this._colorSpace = options.colorSpace;\n            const rtOptions = {\n                // fixed options\n                format: three.RGBAFormat,\n                depthBuffer: false,\n                stencilBuffer: false,\n                // user options\n                type: this._type, // set in class property\n                colorSpace: this._colorSpace, // set in class property\n                anisotropy: ((_a = options.renderTargetOptions) === null || _a === void 0 ? void 0 : _a.anisotropy) !== undefined ? (_b = options.renderTargetOptions) === null || _b === void 0 ? void 0 : _b.anisotropy : 1,\n                generateMipmaps: ((_c = options.renderTargetOptions) === null || _c === void 0 ? void 0 : _c.generateMipmaps) !== undefined ? (_d = options.renderTargetOptions) === null || _d === void 0 ? void 0 : _d.generateMipmaps : false,\n                magFilter: ((_e = options.renderTargetOptions) === null || _e === void 0 ? void 0 : _e.magFilter) !== undefined ? (_f = options.renderTargetOptions) === null || _f === void 0 ? void 0 : _f.magFilter : three.LinearFilter,\n                minFilter: ((_g = options.renderTargetOptions) === null || _g === void 0 ? void 0 : _g.minFilter) !== undefined ? (_h = options.renderTargetOptions) === null || _h === void 0 ? void 0 : _h.minFilter : three.LinearFilter,\n                samples: ((_j = options.renderTargetOptions) === null || _j === void 0 ? void 0 : _j.samples) !== undefined ? (_k = options.renderTargetOptions) === null || _k === void 0 ? void 0 : _k.samples : undefined,\n                wrapS: ((_l = options.renderTargetOptions) === null || _l === void 0 ? void 0 : _l.wrapS) !== undefined ? (_m = options.renderTargetOptions) === null || _m === void 0 ? void 0 : _m.wrapS : three.ClampToEdgeWrapping,\n                wrapT: ((_o = options.renderTargetOptions) === null || _o === void 0 ? void 0 : _o.wrapT) !== undefined ? (_p = options.renderTargetOptions) === null || _p === void 0 ? void 0 : _p.wrapT : three.ClampToEdgeWrapping\n            };\n            this._material = options.material;\n            if (options.renderer) {\n                this._renderer = options.renderer;\n            }\n            else {\n                this._renderer = QuadRenderer.instantiateRenderer();\n                this._rendererIsDisposable = true;\n            }\n            this._scene = new three.Scene();\n            this._camera = new three.OrthographicCamera();\n            this._camera.position.set(0, 0, 10);\n            this._camera.left = -0.5;\n            this._camera.right = 0.5;\n            this._camera.top = 0.5;\n            this._camera.bottom = -0.5;\n            this._camera.updateProjectionMatrix();\n            if (!canReadPixels(this._type, this._renderer, this._camera, rtOptions)) {\n                let alternativeType;\n                switch (this._type) {\n                    case three.HalfFloatType:\n                        alternativeType = this._renderer.extensions.has('EXT_color_buffer_float') ? three.FloatType : undefined;\n                        break;\n                }\n                if (alternativeType !== undefined) {\n                    console.warn(`This browser does not support reading pixels from ${this._type} RenderTargets, switching to ${three.FloatType}`);\n                    this._type = alternativeType;\n                }\n                else {\n                    this._supportsReadPixels = false;\n                    console.warn('This browser dos not support toArray or toDataTexture, calls to those methods will result in an error thrown');\n                }\n            }\n            this._quad = new three.Mesh(new three.PlaneGeometry(), this._material);\n            this._quad.geometry.computeBoundingBox();\n            this._scene.add(this._quad);\n            this._renderTarget = new three.WebGLRenderTarget(this.width, this.height, rtOptions);\n            this._renderTarget.texture.mapping = ((_q = options.renderTargetOptions) === null || _q === void 0 ? void 0 : _q.mapping) !== undefined ? (_r = options.renderTargetOptions) === null || _r === void 0 ? void 0 : _r.mapping : three.UVMapping;\n        }\n        /**\n         * Instantiates a temporary renderer\n         *\n         * @returns\n         */\n        static instantiateRenderer() {\n            const renderer = new three.WebGLRenderer();\n            renderer.setSize(128, 128);\n            // renderer.outputColorSpace = SRGBColorSpace\n            // renderer.toneMapping = LinearToneMapping\n            // renderer.debug.checkShaderErrors = false\n            // this._rendererIsDisposable = true\n            return renderer;\n        }\n        /**\n         * Obtains a Buffer containing the rendered texture.\n         *\n         * @throws Error if the browser cannot read pixels from this RenderTarget type.\n         * @returns a TypedArray containing RGBA values from this renderer\n         */\n        toArray() {\n            if (!this._supportsReadPixels)\n                throw new Error('Can\\'t read pixels in this browser');\n            const out = getBufferForType(this._type, this._width, this._height);\n            this._renderer.readRenderTargetPixels(this._renderTarget, 0, 0, this._width, this._height, out);\n            return out;\n        }\n        /**\n         * Performs a readPixel operation in the renderTarget\n         * and returns a DataTexture containing the read data\n         *\n         * @param options options\n         * @returns\n         */\n        toDataTexture(options) {\n            const returnValue = new three.DataTexture(\n            // fixed values\n            this.toArray(), this.width, this.height, three.RGBAFormat, this._type, \n            // user values\n            (options === null || options === void 0 ? void 0 : options.mapping) || three.UVMapping, (options === null || options === void 0 ? void 0 : options.wrapS) || three.ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.wrapT) || three.ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.magFilter) || three.LinearFilter, (options === null || options === void 0 ? void 0 : options.minFilter) || three.LinearFilter, (options === null || options === void 0 ? void 0 : options.anisotropy) || 1, \n            // fixed value\n            three.LinearSRGBColorSpace);\n            // set this afterwards, we can't set it in constructor\n            returnValue.generateMipmaps = (options === null || options === void 0 ? void 0 : options.generateMipmaps) !== undefined ? options === null || options === void 0 ? void 0 : options.generateMipmaps : false;\n            return returnValue;\n        }\n        /**\n         * If using a disposable renderer, it will dispose it.\n         */\n        disposeOnDemandRenderer() {\n            this._renderer.setRenderTarget(null);\n            if (this._rendererIsDisposable) {\n                this._renderer.dispose();\n                this._renderer.forceContextLoss();\n            }\n        }\n        /**\n         * Will dispose of **all** assets used by this renderer.\n         *\n         *\n         * @param disposeRenderTarget will dispose of the renderTarget which will not be usable later\n         * set this to true if you passed the `renderTarget.texture` to a `PMREMGenerator`\n         * or are otherwise done with it.\n         *\n         * @example\n         * ```js\n         * const loader = new HDRJPGLoader(renderer)\n         * const result = await loader.loadAsync('gainmap.jpeg')\n         * const mesh = new Mesh(geometry, new MeshBasicMaterial({ map: result.renderTarget.texture }) )\n         * // DO NOT dispose the renderTarget here,\n         * // it is used directly in the material\n         * result.dispose()\n         * ```\n         *\n         * @example\n         * ```js\n         * const loader = new HDRJPGLoader(renderer)\n         * const pmremGenerator = new PMREMGenerator( renderer );\n         * const result = await loader.loadAsync('gainmap.jpeg')\n         * const envMap = pmremGenerator.fromEquirectangular(result.renderTarget.texture)\n         * const mesh = new Mesh(geometry, new MeshStandardMaterial({ envMap }) )\n         * // renderTarget can be disposed here\n         * // because it was used to generate a PMREM texture\n         * result.dispose(true)\n         * ```\n         */\n        dispose(disposeRenderTarget) {\n            this.disposeOnDemandRenderer();\n            if (disposeRenderTarget) {\n                this.renderTarget.dispose();\n            }\n            // dispose shader material texture uniforms\n            if (this.material instanceof three.ShaderMaterial) {\n                Object.values(this.material.uniforms).forEach(v => {\n                    if (v.value instanceof three.Texture)\n                        v.value.dispose();\n                });\n            }\n            // dispose other material properties\n            Object.values(this.material).forEach(value => {\n                if (value instanceof three.Texture)\n                    value.dispose();\n            });\n            this.material.dispose();\n            this._quad.geometry.dispose();\n        }\n        /**\n         * Width of the texture\n         */\n        get width() { return this._width; }\n        set width(value) {\n            this._width = value;\n            this._renderTarget.setSize(this._width, this._height);\n        }\n        /**\n         * Height of the texture\n         */\n        get height() { return this._height; }\n        set height(value) {\n            this._height = value;\n            this._renderTarget.setSize(this._width, this._height);\n        }\n        /**\n         * The renderer used\n         */\n        get renderer() { return this._renderer; }\n        /**\n         * The `WebGLRenderTarget` used.\n         */\n        get renderTarget() { return this._renderTarget; }\n        set renderTarget(value) {\n            this._renderTarget = value;\n            this._width = value.width;\n            this._height = value.height;\n            // this._type = value.texture.type\n        }\n        /**\n         * The `Material` used.\n         */\n        get material() { return this._material; }\n        /**\n         *\n         */\n        get type() { return this._type; }\n        get colorSpace() { return this._colorSpace; }\n    }\n\n    const vertexShader = /* glsl */ `\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\n    const fragmentShader = /* glsl */ `\n// min half float value\n#define HALF_FLOAT_MIN vec3( -65504, -65504, -65504 )\n// max half float value\n#define HALF_FLOAT_MAX vec3( 65504, 65504, 65504 )\n\nuniform sampler2D sdr;\nuniform sampler2D gainMap;\nuniform vec3 gamma;\nuniform vec3 offsetHdr;\nuniform vec3 offsetSdr;\nuniform vec3 gainMapMin;\nuniform vec3 gainMapMax;\nuniform float weightFactor;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 rgb = texture2D( sdr, vUv ).rgb;\n  vec3 recovery = texture2D( gainMap, vUv ).rgb;\n  vec3 logRecovery = pow( recovery, gamma );\n  vec3 logBoost = gainMapMin * ( 1.0 - logRecovery ) + gainMapMax * logRecovery;\n  vec3 hdrColor = (rgb + offsetSdr) * exp2( logBoost * weightFactor ) - offsetHdr;\n  vec3 clampedHdrColor = max( HALF_FLOAT_MIN, min( HALF_FLOAT_MAX, hdrColor ));\n  gl_FragColor = vec4( clampedHdrColor , 1.0 );\n}\n`;\n    /**\n     * A Material which is able to decode the Gainmap into a full HDR Representation\n     *\n     * @category Materials\n     * @group Materials\n     */\n    class GainMapDecoderMaterial extends three.ShaderMaterial {\n        /**\n         *\n         * @param params\n         */\n        constructor({ gamma, offsetHdr, offsetSdr, gainMapMin, gainMapMax, maxDisplayBoost, hdrCapacityMin, hdrCapacityMax, sdr, gainMap }) {\n            super({\n                name: 'GainMapDecoderMaterial',\n                vertexShader,\n                fragmentShader,\n                uniforms: {\n                    sdr: { value: sdr },\n                    gainMap: { value: gainMap },\n                    gamma: { value: new three.Vector3(1.0 / gamma[0], 1.0 / gamma[1], 1.0 / gamma[2]) },\n                    offsetHdr: { value: new three.Vector3().fromArray(offsetHdr) },\n                    offsetSdr: { value: new three.Vector3().fromArray(offsetSdr) },\n                    gainMapMin: { value: new three.Vector3().fromArray(gainMapMin) },\n                    gainMapMax: { value: new three.Vector3().fromArray(gainMapMax) },\n                    weightFactor: {\n                        value: (Math.log2(maxDisplayBoost) - hdrCapacityMin) / (hdrCapacityMax - hdrCapacityMin)\n                    }\n                },\n                blending: three.NoBlending,\n                depthTest: false,\n                depthWrite: false\n            });\n            this._maxDisplayBoost = maxDisplayBoost;\n            this._hdrCapacityMin = hdrCapacityMin;\n            this._hdrCapacityMax = hdrCapacityMax;\n            this.needsUpdate = true;\n            this.uniformsNeedUpdate = true;\n        }\n        get sdr() { return this.uniforms.sdr.value; }\n        set sdr(value) { this.uniforms.sdr.value = value; }\n        get gainMap() { return this.uniforms.gainMap.value; }\n        set gainMap(value) { this.uniforms.gainMap.value = value; }\n        /**\n         * @see {@link GainMapMetadata.offsetHdr}\n         */\n        get offsetHdr() { return this.uniforms.offsetHdr.value.toArray(); }\n        set offsetHdr(value) { this.uniforms.offsetHdr.value.fromArray(value); }\n        /**\n         * @see {@link GainMapMetadata.offsetSdr}\n         */\n        get offsetSdr() { return this.uniforms.offsetSdr.value.toArray(); }\n        set offsetSdr(value) { this.uniforms.offsetSdr.value.fromArray(value); }\n        /**\n         * @see {@link GainMapMetadata.gainMapMin}\n         */\n        get gainMapMin() { return this.uniforms.gainMapMin.value.toArray(); }\n        set gainMapMin(value) { this.uniforms.gainMapMin.value.fromArray(value); }\n        /**\n         * @see {@link GainMapMetadata.gainMapMax}\n         */\n        get gainMapMax() { return this.uniforms.gainMapMax.value.toArray(); }\n        set gainMapMax(value) { this.uniforms.gainMapMax.value.fromArray(value); }\n        /**\n         * @see {@link GainMapMetadata.gamma}\n         */\n        get gamma() {\n            const g = this.uniforms.gamma.value;\n            return [1 / g.x, 1 / g.y, 1 / g.z];\n        }\n        set gamma(value) {\n            const g = this.uniforms.gamma.value;\n            g.x = 1.0 / value[0];\n            g.y = 1.0 / value[1];\n            g.z = 1.0 / value[2];\n        }\n        /**\n         * @see {@link GainMapMetadata.hdrCapacityMin}\n         * @remarks Logarithmic space\n         */\n        get hdrCapacityMin() { return this._hdrCapacityMin; }\n        set hdrCapacityMin(value) {\n            this._hdrCapacityMin = value;\n            this.calculateWeight();\n        }\n        /**\n         * @see {@link GainMapMetadata.hdrCapacityMin}\n         * @remarks Logarithmic space\n         */\n        get hdrCapacityMax() { return this._hdrCapacityMax; }\n        set hdrCapacityMax(value) {\n            this._hdrCapacityMax = value;\n            this.calculateWeight();\n        }\n        /**\n         * @see {@link GainmapDecodingParameters.maxDisplayBoost}\n         * @remarks Non Logarithmic space\n         */\n        get maxDisplayBoost() { return this._maxDisplayBoost; }\n        set maxDisplayBoost(value) {\n            this._maxDisplayBoost = Math.max(1, Math.min(65504, value));\n            this.calculateWeight();\n        }\n        calculateWeight() {\n            const val = (Math.log2(this._maxDisplayBoost) - this._hdrCapacityMin) / (this._hdrCapacityMax - this._hdrCapacityMin);\n            this.uniforms.weightFactor.value = Math.max(0, Math.min(1, val));\n        }\n    }\n\n    /**\n     * Decodes a gain map using a WebGLRenderTarget\n     *\n     * @category Decoding Functions\n     * @group Decoding Functions\n     * @example\n     * import { decode } from '@monogrid/gainmap-js'\n     * import {\n     *   Mesh,\n     *   MeshBasicMaterial,\n     *   PerspectiveCamera,\n     *   PlaneGeometry,\n     *   Scene,\n     *   TextureLoader,\n     *   WebGLRenderer\n     * } from 'three'\n     *\n     * const renderer = new WebGLRenderer()\n     *\n     * const textureLoader = new TextureLoader()\n     *\n     * // load SDR Representation\n     * const sdr = await textureLoader.loadAsync('sdr.jpg')\n     * // load Gain map recovery image\n     * const gainMap = await textureLoader.loadAsync('gainmap.jpg')\n     * // load metadata\n     * const metadata = await (await fetch('metadata.json')).json()\n     *\n     * const result = await decode({\n     *   sdr,\n     *   gainMap,\n     *   // this allows to use `result.renderTarget.texture` directly\n     *   renderer,\n     *   // this will restore the full HDR range\n     *   maxDisplayBoost: Math.pow(2, metadata.hdrCapacityMax),\n     *   ...metadata\n     * })\n     *\n     * const scene = new Scene()\n     * // `result` can be used to populate a Texture\n     * const mesh = new Mesh(\n     *   new PlaneGeometry(),\n     *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n     * )\n     * scene.add(mesh)\n     * renderer.render(scene, new PerspectiveCamera())\n     *\n     * // result must be manually disposed\n     * // when you are done using it\n     * result.dispose()\n     *\n     * @param params\n     * @returns\n     * @throws {Error} if the WebGLRenderer fails to render the gain map\n     */\n    const decode = (params) => {\n        const { sdr, gainMap, renderer } = params;\n        if (sdr.colorSpace !== three.SRGBColorSpace) {\n            console.warn('SDR Colorspace needs to be *SRGBColorSpace*, setting it automatically');\n            sdr.colorSpace = three.SRGBColorSpace;\n        }\n        sdr.needsUpdate = true;\n        if (gainMap.colorSpace !== three.LinearSRGBColorSpace) {\n            console.warn('Gainmap Colorspace needs to be *LinearSRGBColorSpace*, setting it automatically');\n            gainMap.colorSpace = three.LinearSRGBColorSpace;\n        }\n        gainMap.needsUpdate = true;\n        const material = new GainMapDecoderMaterial({\n            ...params,\n            sdr,\n            gainMap\n        });\n        const quadRenderer = new QuadRenderer({\n            // TODO: three types are generic, eslint complains here, see how we can solve\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n            width: sdr.image.width,\n            // TODO: three types are generic, eslint complains here, see how we can solve\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n            height: sdr.image.height,\n            type: three.HalfFloatType,\n            colorSpace: three.LinearSRGBColorSpace,\n            material,\n            renderer,\n            renderTargetOptions: params.renderTargetOptions\n        });\n        try {\n            quadRenderer.render();\n        }\n        catch (e) {\n            quadRenderer.disposeOnDemandRenderer();\n            throw e;\n        }\n        return quadRenderer;\n    };\n\n    class GainMapNotFoundError extends Error {\n    }\n\n    class XMPMetadataNotFoundError extends Error {\n    }\n\n    const getXMLValue = (xml, tag, defaultValue) => {\n        // Check for attribute format first: tag=\"value\"\n        const attributeMatch = new RegExp(`${tag}=\"([^\"]*)\"`, 'i').exec(xml);\n        if (attributeMatch)\n            return attributeMatch[1];\n        // Check for tag format: <tag>value</tag> or <tag><rdf:li>value</rdf:li>...</tag>\n        const tagMatch = new RegExp(`<${tag}[^>]*>([\\\\s\\\\S]*?)</${tag}>`, 'i').exec(xml);\n        if (tagMatch) {\n            // Check if it contains rdf:li elements\n            const liValues = tagMatch[1].match(/<rdf:li>([^<]*)<\\/rdf:li>/g);\n            if (liValues && liValues.length === 3) {\n                return liValues.map(v => v.replace(/<\\/?rdf:li>/g, ''));\n            }\n            return tagMatch[1].trim();\n        }\n        if (defaultValue !== undefined)\n            return defaultValue;\n        throw new Error(`Can't find ${tag} in gainmap metadata`);\n    };\n    const extractXMP = (input) => {\n        let str;\n        // support node test environment\n        if (typeof TextDecoder !== 'undefined')\n            str = new TextDecoder().decode(input);\n        else\n            str = input.toString();\n        let start = str.indexOf('<x:xmpmeta');\n        while (start !== -1) {\n            const end = str.indexOf('x:xmpmeta>', start);\n            const xmpBlock = str.slice(start, end + 10);\n            try {\n                const gainMapMin = getXMLValue(xmpBlock, 'hdrgm:GainMapMin', '0');\n                const gainMapMax = getXMLValue(xmpBlock, 'hdrgm:GainMapMax');\n                const gamma = getXMLValue(xmpBlock, 'hdrgm:Gamma', '1');\n                const offsetSDR = getXMLValue(xmpBlock, 'hdrgm:OffsetSDR', '0.015625');\n                const offsetHDR = getXMLValue(xmpBlock, 'hdrgm:OffsetHDR', '0.015625');\n                // These are always attributes, so we can use a simpler regex\n                const hdrCapacityMinMatch = /hdrgm:HDRCapacityMin=\"([^\"]*)\"/.exec(xmpBlock);\n                const hdrCapacityMin = hdrCapacityMinMatch ? hdrCapacityMinMatch[1] : '0';\n                const hdrCapacityMaxMatch = /hdrgm:HDRCapacityMax=\"([^\"]*)\"/.exec(xmpBlock);\n                if (!hdrCapacityMaxMatch)\n                    throw new Error('Incomplete gainmap metadata');\n                const hdrCapacityMax = hdrCapacityMaxMatch[1];\n                return {\n                    gainMapMin: Array.isArray(gainMapMin) ? gainMapMin.map(v => parseFloat(v)) : [parseFloat(gainMapMin), parseFloat(gainMapMin), parseFloat(gainMapMin)],\n                    gainMapMax: Array.isArray(gainMapMax) ? gainMapMax.map(v => parseFloat(v)) : [parseFloat(gainMapMax), parseFloat(gainMapMax), parseFloat(gainMapMax)],\n                    gamma: Array.isArray(gamma) ? gamma.map(v => parseFloat(v)) : [parseFloat(gamma), parseFloat(gamma), parseFloat(gamma)],\n                    offsetSdr: Array.isArray(offsetSDR) ? offsetSDR.map(v => parseFloat(v)) : [parseFloat(offsetSDR), parseFloat(offsetSDR), parseFloat(offsetSDR)],\n                    offsetHdr: Array.isArray(offsetHDR) ? offsetHDR.map(v => parseFloat(v)) : [parseFloat(offsetHDR), parseFloat(offsetHDR), parseFloat(offsetHDR)],\n                    hdrCapacityMin: parseFloat(hdrCapacityMin),\n                    hdrCapacityMax: parseFloat(hdrCapacityMax)\n                };\n            }\n            catch (e) {\n                // Continue searching for another xmpmeta block if this one fails\n            }\n            start = str.indexOf('<x:xmpmeta', end);\n        }\n    };\n\n    /**\n     * MPF Extractor (Multi Picture Format Extractor)\n     * By Henrik S Nilsson 2019\n     *\n     * Extracts images stored in images based on the MPF format (found here: https://www.cipa.jp/e/std/std-sec.html\n     * under \"CIPA DC-007-Translation-2021 Multi-Picture Format\"\n     *\n     * Overly commented, and without intention of being complete or production ready.\n     * Created to extract depth maps from iPhone images, and to learn about image metadata.\n     * Kudos to: Phil Harvey (exiftool), Jaume Sanchez (android-lens-blur-depth-extractor)\n     */\n    class MPFExtractor {\n        constructor(options) {\n            this.options = {\n                debug: options && options.debug !== undefined ? options.debug : false,\n                extractFII: options && options.extractFII !== undefined ? options.extractFII : true,\n                extractNonFII: options && options.extractNonFII !== undefined ? options.extractNonFII : true\n            };\n        }\n        extract(imageArrayBuffer) {\n            return new Promise((resolve, reject) => {\n                const debug = this.options.debug;\n                const dataView = new DataView(imageArrayBuffer.buffer);\n                // If you're executing this line on a big endian machine, it'll be reversed.\n                // bigEnd further down though, refers to the endianness of the image itself.\n                if (dataView.getUint16(0) !== 0xffd8) {\n                    reject(new Error('Not a valid jpeg'));\n                    return;\n                }\n                const length = dataView.byteLength;\n                let offset = 2;\n                let loops = 0;\n                let marker; // APP# marker\n                while (offset < length) {\n                    if (++loops > 250) {\n                        reject(new Error(`Found no marker after ${loops} loops 😵`));\n                        return;\n                    }\n                    if (dataView.getUint8(offset) !== 0xff) {\n                        reject(new Error(`Not a valid marker at offset 0x${offset.toString(16)}, found: 0x${dataView.getUint8(offset).toString(16)}`));\n                        return;\n                    }\n                    marker = dataView.getUint8(offset + 1);\n                    if (debug)\n                        console.log(`Marker: ${marker.toString(16)}`);\n                    if (marker === 0xe2) {\n                        if (debug)\n                            console.log('Found APP2 marker (0xffe2)');\n                        // Works for iPhone 8 Plus, X, and XSMax. Or any photos of MPF format.\n                        // Great way to visualize image information in html is using Exiftool. E.g.:\n                        // ./exiftool.exe -htmldump -wantTrailer photo.jpg > photo.html\n                        const formatPt = offset + 4;\n                        /*\n                         *  Structure of the MP Format Identifier\n                         *\n                         *  Offset Addr.  | Code (Hex)  | Description\n                         *  +00             ff            Marker Prefix      <-- offset\n                         *  +01             e2            APP2\n                         *  +02             #n            APP2 Field Length\n                         *  +03             #n            APP2 Field Length\n                         *  +04             4d            'M'                <-- formatPt\n                         *  +05             50            'P'\n                         *  +06             46            'F'\n                         *  +07             00            NULL\n                         *                                                   <-- tiffOffset\n                         */\n                        if (dataView.getUint32(formatPt) === 0x4d504600) {\n                            // Found MPF tag, so we start dig out sub images\n                            const tiffOffset = formatPt + 4;\n                            let bigEnd; // Endianness from TIFF header\n                            // Test for TIFF validity and endianness\n                            // 0x4949 and 0x4D4D ('II' and 'MM') marks Little Endian and Big Endian\n                            if (dataView.getUint16(tiffOffset) === 0x4949) {\n                                bigEnd = false;\n                            }\n                            else if (dataView.getUint16(tiffOffset) === 0x4d4d) {\n                                bigEnd = true;\n                            }\n                            else {\n                                reject(new Error('No valid endianness marker found in TIFF header'));\n                                return;\n                            }\n                            if (dataView.getUint16(tiffOffset + 2, !bigEnd) !== 0x002a) {\n                                reject(new Error('Not valid TIFF data! (no 0x002A marker)'));\n                                return;\n                            }\n                            // 32 bit number stating the offset from the start of the 8 Byte MP Header\n                            // to MP Index IFD Least possible value is thus 8 (means 0 offset)\n                            const firstIFDOffset = dataView.getUint32(tiffOffset + 4, !bigEnd);\n                            if (firstIFDOffset < 0x00000008) {\n                                reject(new Error('Not valid TIFF data! (First offset less than 8)'));\n                                return;\n                            }\n                            // Move ahead to MP Index IFD\n                            // Assume we're at the first IFD, so firstIFDOffset points to\n                            // MP Index IFD and not MP Attributes IFD. (If we try extract from a sub image,\n                            // we fail silently here due to this assumption)\n                            // Count (2 Byte) | MP Index Fields a.k.a. MP Entries (count * 12 Byte) | Offset of Next IFD (4 Byte)\n                            const dirStart = tiffOffset + firstIFDOffset; // Start of IFD (Image File Directory)\n                            const count = dataView.getUint16(dirStart, !bigEnd); // Count of MPEntries (2 Byte)\n                            // Extract info from MPEntries (starting after Count)\n                            const entriesStart = dirStart + 2;\n                            let numberOfImages = 0;\n                            for (let i = entriesStart; i < entriesStart + 12 * count; i += 12) {\n                                // Each entry is 12 Bytes long\n                                // Check MP Index IFD tags, here we only take tag 0xb001 = Number of images\n                                if (dataView.getUint16(i, !bigEnd) === 0xb001) {\n                                    // stored in Last 4 bytes of its 12 Byte entry.\n                                    numberOfImages = dataView.getUint32(i + 8, !bigEnd);\n                                }\n                            }\n                            const nextIFDOffsetLen = 4; // 4 Byte offset field that appears after MP Index IFD tags\n                            const MPImageListValPt = dirStart + 2 + count * 12 + nextIFDOffsetLen;\n                            const images = [];\n                            for (let i = MPImageListValPt; i < MPImageListValPt + numberOfImages * 16; i += 16) {\n                                const image = {\n                                    MPType: dataView.getUint32(i, !bigEnd),\n                                    size: dataView.getUint32(i + 4, !bigEnd),\n                                    // This offset is specified relative to the address of the MP Endian\n                                    // field in the MP Header, unless the image is a First Individual Image,\n                                    // in which case the value of the offset shall be NULL (0x00000000).\n                                    dataOffset: dataView.getUint32(i + 8, !bigEnd),\n                                    dependantImages: dataView.getUint32(i + 12, !bigEnd),\n                                    start: -1,\n                                    end: -1,\n                                    isFII: false\n                                };\n                                if (!image.dataOffset) {\n                                    // dataOffset is 0x00000000 for First Individual Image\n                                    image.start = 0;\n                                    image.isFII = true;\n                                }\n                                else {\n                                    image.start = tiffOffset + image.dataOffset;\n                                    image.isFII = false;\n                                }\n                                image.end = image.start + image.size;\n                                images.push(image);\n                            }\n                            if (this.options.extractNonFII && images.length) {\n                                const bufferBlob = new Blob([dataView]);\n                                const imgs = [];\n                                for (const image of images) {\n                                    if (image.isFII && !this.options.extractFII) {\n                                        continue; // Skip FII\n                                    }\n                                    const imageBlob = bufferBlob.slice(image.start, image.end + 1, 'image/jpeg');\n                                    // we don't need this\n                                    // const imageUrl = URL.createObjectURL(imageBlob)\n                                    // image.img = document.createElement('img')\n                                    // image.img.src = imageUrl\n                                    imgs.push(imageBlob);\n                                }\n                                resolve(imgs);\n                            }\n                        }\n                    }\n                    offset += 2 + dataView.getUint16(offset + 2);\n                }\n            });\n        }\n    }\n\n    /**\n     * Extracts XMP Metadata and the gain map recovery image\n     * from a single JPEG file.\n     *\n     * @category Decoding Functions\n     * @group Decoding Functions\n     * @param jpegFile an `Uint8Array` containing and encoded JPEG file\n     * @returns an sdr `Uint8Array` compressed in JPEG, a gainMap `Uint8Array` compressed in JPEG and the XMP parsed XMP metadata\n     * @throws Error if XMP Metadata is not found\n     * @throws Error if Gain map image is not found\n     * @example\n     * import { FileLoader } from 'three'\n     * import { extractGainmapFromJPEG } from '@monogrid/gainmap-js'\n     *\n     * const jpegFile = await new FileLoader()\n     *  .setResponseType('arraybuffer')\n     *  .loadAsync('image.jpg')\n     *\n     * const { sdr, gainMap, metadata } = extractGainmapFromJPEG(jpegFile)\n     */\n    const extractGainmapFromJPEG = async (jpegFile) => {\n        const metadata = extractXMP(jpegFile);\n        if (!metadata)\n            throw new XMPMetadataNotFoundError('Gain map XMP metadata not found');\n        const mpfExtractor = new MPFExtractor({ extractFII: true, extractNonFII: true });\n        const images = await mpfExtractor.extract(jpegFile);\n        if (images.length !== 2)\n            throw new GainMapNotFoundError('Gain map recovery image not found');\n        return {\n            sdr: new Uint8Array(await images[0].arrayBuffer()),\n            gainMap: new Uint8Array(await images[1].arrayBuffer()),\n            metadata\n        };\n    };\n\n    /**\n     * private function, async get image from blob\n     *\n     * @param blob\n     * @returns\n     */\n    const getHTMLImageFromBlob = (blob) => {\n        return new Promise((resolve, reject) => {\n            const img = document.createElement('img');\n            img.onload = () => { resolve(img); };\n            img.onerror = (e) => { reject(e); };\n            img.src = URL.createObjectURL(blob);\n        });\n    };\n\n    class LoaderBase extends three.Loader {\n        /**\n         *\n         * @param renderer\n         * @param manager\n         */\n        constructor(renderer, manager) {\n            super(manager);\n            if (renderer)\n                this._renderer = renderer;\n            this._internalLoadingManager = new three.LoadingManager();\n        }\n        /**\n         * Specify the renderer to use when rendering the gain map\n         *\n         * @param renderer\n         * @returns\n         */\n        setRenderer(renderer) {\n            this._renderer = renderer;\n            return this;\n        }\n        /**\n         * Specify the renderTarget options to use when rendering the gain map\n         *\n         * @param options\n         * @returns\n         */\n        setRenderTargetOptions(options) {\n            this._renderTargetOptions = options;\n            return this;\n        }\n        /**\n         * @private\n         * @returns\n         */\n        prepareQuadRenderer() {\n            if (!this._renderer)\n                console.warn('WARNING: An existing WebGL Renderer was not passed to this Loader constructor or in setRenderer, the result of this Loader will need to be converted to a Data Texture with toDataTexture() before you can use it in your renderer.');\n            // temporary values\n            const material = new GainMapDecoderMaterial({\n                gainMapMax: [1, 1, 1],\n                gainMapMin: [0, 0, 0],\n                gamma: [1, 1, 1],\n                offsetHdr: [1, 1, 1],\n                offsetSdr: [1, 1, 1],\n                hdrCapacityMax: 1,\n                hdrCapacityMin: 0,\n                maxDisplayBoost: 1,\n                gainMap: new three.Texture(),\n                sdr: new three.Texture()\n            });\n            return new QuadRenderer({\n                width: 16,\n                height: 16,\n                type: three.HalfFloatType,\n                colorSpace: three.LinearSRGBColorSpace,\n                material,\n                renderer: this._renderer,\n                renderTargetOptions: this._renderTargetOptions\n            });\n        }\n        /**\n       * @private\n       * @param quadRenderer\n       * @param metadata\n       * @param sdrBuffer\n       * @param gainMapBuffer\n       */\n        async render(quadRenderer, metadata, sdrBuffer, gainMapBuffer) {\n            // this is optional, will render a black gain-map if not present\n            const gainMapBlob = gainMapBuffer ? new Blob([gainMapBuffer], { type: 'image/jpeg' }) : undefined;\n            const sdrBlob = new Blob([sdrBuffer], { type: 'image/jpeg' });\n            let sdrImage;\n            let gainMapImage;\n            let needsFlip = false;\n            if (typeof createImageBitmap === 'undefined') {\n                const res = await Promise.all([\n                    gainMapBlob ? getHTMLImageFromBlob(gainMapBlob) : Promise.resolve(undefined),\n                    getHTMLImageFromBlob(sdrBlob)\n                ]);\n                gainMapImage = res[0];\n                sdrImage = res[1];\n                needsFlip = true;\n            }\n            else {\n                const res = await Promise.all([\n                    gainMapBlob ? createImageBitmap(gainMapBlob, { imageOrientation: 'flipY' }) : Promise.resolve(undefined),\n                    createImageBitmap(sdrBlob, { imageOrientation: 'flipY' })\n                ]);\n                gainMapImage = res[0];\n                sdrImage = res[1];\n            }\n            const gainMap = new three.Texture(gainMapImage || new ImageData(2, 2), three.UVMapping, three.ClampToEdgeWrapping, three.ClampToEdgeWrapping, three.LinearFilter, three.LinearMipMapLinearFilter, three.RGBAFormat, three.UnsignedByteType, 1, three.LinearSRGBColorSpace);\n            gainMap.flipY = needsFlip;\n            gainMap.needsUpdate = true;\n            const sdr = new three.Texture(sdrImage, three.UVMapping, three.ClampToEdgeWrapping, three.ClampToEdgeWrapping, three.LinearFilter, three.LinearMipMapLinearFilter, three.RGBAFormat, three.UnsignedByteType, 1, three.SRGBColorSpace);\n            sdr.flipY = needsFlip;\n            sdr.needsUpdate = true;\n            quadRenderer.width = sdrImage.width;\n            quadRenderer.height = sdrImage.height;\n            quadRenderer.material.gainMap = gainMap;\n            quadRenderer.material.sdr = sdr;\n            quadRenderer.material.gainMapMin = metadata.gainMapMin;\n            quadRenderer.material.gainMapMax = metadata.gainMapMax;\n            quadRenderer.material.offsetHdr = metadata.offsetHdr;\n            quadRenderer.material.offsetSdr = metadata.offsetSdr;\n            quadRenderer.material.gamma = metadata.gamma;\n            quadRenderer.material.hdrCapacityMin = metadata.hdrCapacityMin;\n            quadRenderer.material.hdrCapacityMax = metadata.hdrCapacityMax;\n            quadRenderer.material.maxDisplayBoost = Math.pow(2, metadata.hdrCapacityMax);\n            quadRenderer.material.needsUpdate = true;\n            quadRenderer.render();\n        }\n    }\n\n    /**\n     * A Three.js Loader for the gain map format.\n     *\n     * @category Loaders\n     * @group Loaders\n     *\n     * @example\n     * import { GainMapLoader } from '@monogrid/gainmap-js'\n     * import {\n     *   EquirectangularReflectionMapping,\n     *   LinearFilter,\n     *   Mesh,\n     *   MeshBasicMaterial,\n     *   PerspectiveCamera,\n     *   PlaneGeometry,\n     *   Scene,\n     *   WebGLRenderer\n     * } from 'three'\n     *\n     * const renderer = new WebGLRenderer()\n     *\n     * const loader = new GainMapLoader(renderer)\n     *\n     * const result = await loader.loadAsync(['sdr.jpeg', 'gainmap.jpeg', 'metadata.json'])\n     * // `result` can be used to populate a Texture\n     *\n     * const scene = new Scene()\n     * const mesh = new Mesh(\n     *   new PlaneGeometry(),\n     *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n     * )\n     * scene.add(mesh)\n     * renderer.render(scene, new PerspectiveCamera())\n     *\n     * // Starting from three.js r159\n     * // `result.renderTarget.texture` can\n     * // also be used as Equirectangular scene background\n     * //\n     * // it was previously needed to convert it\n     * // to a DataTexture with `result.toDataTexture()`\n     * scene.background = result.renderTarget.texture\n     * scene.background.mapping = EquirectangularReflectionMapping\n     *\n     * // result must be manually disposed\n     * // when you are done using it\n     * result.dispose()\n     *\n     */\n    class GainMapLoader extends LoaderBase {\n        /**\n         * Loads a gainmap using separate data\n         * * sdr image\n         * * gain map image\n         * * metadata json\n         *\n         * useful for webp gain maps\n         *\n         * @param urls An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]\n         * @param onLoad Load complete callback, will receive the result\n         * @param onProgress Progress callback, will receive a {@link ProgressEvent}\n         * @param onError Error callback\n         * @returns\n         */\n        load([sdrUrl, gainMapUrl, metadataUrl], onLoad, onProgress, onError) {\n            const quadRenderer = this.prepareQuadRenderer();\n            let sdr;\n            let gainMap;\n            let metadata;\n            const loadCheck = async () => {\n                if (sdr && gainMap && metadata) {\n                    // solves #16\n                    try {\n                        await this.render(quadRenderer, metadata, sdr, gainMap);\n                    }\n                    catch (error) {\n                        this.manager.itemError(sdrUrl);\n                        this.manager.itemError(gainMapUrl);\n                        this.manager.itemError(metadataUrl);\n                        if (typeof onError === 'function')\n                            onError(error);\n                        quadRenderer.disposeOnDemandRenderer();\n                        return;\n                    }\n                    if (typeof onLoad === 'function')\n                        onLoad(quadRenderer);\n                    this.manager.itemEnd(sdrUrl);\n                    this.manager.itemEnd(gainMapUrl);\n                    this.manager.itemEnd(metadataUrl);\n                    quadRenderer.disposeOnDemandRenderer();\n                }\n            };\n            let sdrLengthComputable = true;\n            let sdrTotal = 0;\n            let sdrLoaded = 0;\n            let gainMapLengthComputable = true;\n            let gainMapTotal = 0;\n            let gainMapLoaded = 0;\n            let metadataLengthComputable = true;\n            let metadataTotal = 0;\n            let metadataLoaded = 0;\n            const progressHandler = () => {\n                if (typeof onProgress === 'function') {\n                    const total = sdrTotal + gainMapTotal + metadataTotal;\n                    const loaded = sdrLoaded + gainMapLoaded + metadataLoaded;\n                    const lengthComputable = sdrLengthComputable && gainMapLengthComputable && metadataLengthComputable;\n                    onProgress(new ProgressEvent('progress', { lengthComputable, loaded, total }));\n                }\n            };\n            this.manager.itemStart(sdrUrl);\n            this.manager.itemStart(gainMapUrl);\n            this.manager.itemStart(metadataUrl);\n            const sdrLoader = new three.FileLoader(this._internalLoadingManager);\n            sdrLoader.setResponseType('arraybuffer');\n            sdrLoader.setRequestHeader(this.requestHeader);\n            sdrLoader.setPath(this.path);\n            sdrLoader.setWithCredentials(this.withCredentials);\n            sdrLoader.load(sdrUrl, async (buffer) => {\n                /* istanbul ignore if\n                 this condition exists only because of three.js types + strict mode\n                */\n                if (typeof buffer === 'string')\n                    throw new Error('Invalid sdr buffer');\n                sdr = buffer;\n                await loadCheck();\n            }, (e) => {\n                sdrLengthComputable = e.lengthComputable;\n                sdrLoaded = e.loaded;\n                sdrTotal = e.total;\n                progressHandler();\n            }, (error) => {\n                this.manager.itemError(sdrUrl);\n                if (typeof onError === 'function')\n                    onError(error);\n            });\n            const gainMapLoader = new three.FileLoader(this._internalLoadingManager);\n            gainMapLoader.setResponseType('arraybuffer');\n            gainMapLoader.setRequestHeader(this.requestHeader);\n            gainMapLoader.setPath(this.path);\n            gainMapLoader.setWithCredentials(this.withCredentials);\n            gainMapLoader.load(gainMapUrl, async (buffer) => {\n                /* istanbul ignore if\n                 this condition exists only because of three.js types + strict mode\n                */\n                if (typeof buffer === 'string')\n                    throw new Error('Invalid gainmap buffer');\n                gainMap = buffer;\n                await loadCheck();\n            }, (e) => {\n                gainMapLengthComputable = e.lengthComputable;\n                gainMapLoaded = e.loaded;\n                gainMapTotal = e.total;\n                progressHandler();\n            }, (error) => {\n                this.manager.itemError(gainMapUrl);\n                if (typeof onError === 'function')\n                    onError(error);\n            });\n            const metadataLoader = new three.FileLoader(this._internalLoadingManager);\n            // metadataLoader.setResponseType('json')\n            metadataLoader.setRequestHeader(this.requestHeader);\n            metadataLoader.setPath(this.path);\n            metadataLoader.setWithCredentials(this.withCredentials);\n            metadataLoader.load(metadataUrl, async (json) => {\n                /* istanbul ignore if\n                 this condition exists only because of three.js types + strict mode\n                */\n                if (typeof json !== 'string')\n                    throw new Error('Invalid metadata string');\n                // TODO: implement check on JSON file and remove this eslint disable\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                metadata = JSON.parse(json);\n                await loadCheck();\n            }, (e) => {\n                metadataLengthComputable = e.lengthComputable;\n                metadataLoaded = e.loaded;\n                metadataTotal = e.total;\n                progressHandler();\n            }, (error) => {\n                this.manager.itemError(metadataUrl);\n                if (typeof onError === 'function')\n                    onError(error);\n            });\n            return quadRenderer;\n        }\n    }\n\n    /**\n     * A Three.js Loader for a JPEG with embedded gainmap metadata.\n     *\n     * @category Loaders\n     * @group Loaders\n     *\n     * @example\n     * import { HDRJPGLoader } from '@monogrid/gainmap-js'\n     * import {\n     *   EquirectangularReflectionMapping,\n     *   LinearFilter,\n     *   Mesh,\n     *   MeshBasicMaterial,\n     *   PerspectiveCamera,\n     *   PlaneGeometry,\n     *   Scene,\n     *   WebGLRenderer\n     * } from 'three'\n     *\n     * const renderer = new WebGLRenderer()\n     *\n     * const loader = new HDRJPGLoader(renderer)\n     *\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * // `result` can be used to populate a Texture\n     *\n     * const scene = new Scene()\n     * const mesh = new Mesh(\n     *   new PlaneGeometry(),\n     *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n     * )\n     * scene.add(mesh)\n     * renderer.render(scene, new PerspectiveCamera())\n     *\n     * // Starting from three.js r159\n     * // `result.renderTarget.texture` can\n     * // also be used as Equirectangular scene background\n     * //\n     * // it was previously needed to convert it\n     * // to a DataTexture with `result.toDataTexture()`\n     * scene.background = result.renderTarget.texture\n     * scene.background.mapping = EquirectangularReflectionMapping\n     *\n     * // result must be manually disposed\n     * // when you are done using it\n     * result.dispose()\n     *\n     */\n    class HDRJPGLoader extends LoaderBase {\n        /**\n         * Loads a JPEG containing gain map metadata\n         * Renders a normal SDR image if gainmap data is not found\n         *\n         * @param url An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]\n         * @param onLoad Load complete callback, will receive the result\n         * @param onProgress Progress callback, will receive a {@link ProgressEvent}\n         * @param onError Error callback\n         * @returns\n         */\n        load(url, onLoad, onProgress, onError) {\n            const quadRenderer = this.prepareQuadRenderer();\n            const loader = new three.FileLoader(this._internalLoadingManager);\n            loader.setResponseType('arraybuffer');\n            loader.setRequestHeader(this.requestHeader);\n            loader.setPath(this.path);\n            loader.setWithCredentials(this.withCredentials);\n            this.manager.itemStart(url);\n            loader.load(url, async (jpeg) => {\n                /* istanbul ignore if\n                 this condition exists only because of three.js types + strict mode\n                */\n                if (typeof jpeg === 'string')\n                    throw new Error('Invalid buffer, received [string], was expecting [ArrayBuffer]');\n                const jpegBuffer = new Uint8Array(jpeg);\n                let sdrJPEG;\n                let gainMapJPEG;\n                let metadata;\n                try {\n                    const extractionResult = await extractGainmapFromJPEG(jpegBuffer);\n                    // gain map is successfully reconstructed\n                    sdrJPEG = extractionResult.sdr;\n                    gainMapJPEG = extractionResult.gainMap;\n                    metadata = extractionResult.metadata;\n                }\n                catch (e) {\n                    // render the SDR version if this is not a gainmap\n                    if (e instanceof XMPMetadataNotFoundError || e instanceof GainMapNotFoundError) {\n                        console.warn(`Failure to reconstruct an HDR image from ${url}: Gain map metadata not found in the file, HDRJPGLoader will render the SDR jpeg`);\n                        metadata = {\n                            gainMapMin: [0, 0, 0],\n                            gainMapMax: [1, 1, 1],\n                            gamma: [1, 1, 1],\n                            hdrCapacityMin: 0,\n                            hdrCapacityMax: 1,\n                            offsetHdr: [0, 0, 0],\n                            offsetSdr: [0, 0, 0]\n                        };\n                        sdrJPEG = jpegBuffer;\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n                // solves #16\n                try {\n                    await this.render(quadRenderer, metadata, sdrJPEG, gainMapJPEG);\n                }\n                catch (error) {\n                    this.manager.itemError(url);\n                    if (typeof onError === 'function')\n                        onError(error);\n                    quadRenderer.disposeOnDemandRenderer();\n                    return;\n                }\n                if (typeof onLoad === 'function')\n                    onLoad(quadRenderer);\n                this.manager.itemEnd(url);\n                quadRenderer.disposeOnDemandRenderer();\n            }, onProgress, (error) => {\n                this.manager.itemError(url);\n                if (typeof onError === 'function')\n                    onError(error);\n            });\n            return quadRenderer;\n        }\n    }\n\n    exports.GainMapDecoderMaterial = GainMapDecoderMaterial;\n    exports.GainMapLoader = GainMapLoader;\n    exports.HDRJPGLoader = HDRJPGLoader;\n    exports.JPEGRLoader = HDRJPGLoader;\n    exports.MPFExtractor = MPFExtractor;\n    exports.QuadRenderer = QuadRenderer;\n    exports.decode = decode;\n    exports.extractGainmapFromJPEG = extractGainmapFromJPEG;\n    exports.extractXMP = extractXMP;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@monogrid/gainmap-js/dist/decode.umd.cjs\n");

/***/ })

};
;